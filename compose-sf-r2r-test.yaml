networks:
  r2r-network-test:
    driver: bridge
    attachable: true
    labels:
      - "com.docker.compose.recreate=always"
    driver_opts:
      com.docker.network.driver.mtu: 9000
    ipam:
      driver: default
      config:
        - subnet: 172.21.0.0/16

volumes:
  hatchet_certs_test:
    name: ${VOLUME_HATCHET_CERTS:-hatchet_certs_test}
  hatchet_config_test:
    name: ${VOLUME_HATCHET_CONFIG:-hatchet_config_test}
  hatchet_api_key_test:
    name: ${VOLUME_HATCHET_API_KEY:-hatchet_api_key_test}
  postgres_data_test: # For the R2R pgvector instance, if run with --profile postgres
    name: ${VOLUME_POSTGRES_DATA:-postgres_data_test}
  hatchet_rabbitmq_data_test:
    name: ${VOLUME_HATCHET_RABBITMQ_DATA:-hatchet_rabbitmq_data_test}
  hatchet_rabbitmq_conf_test:
    name: ${VOLUME_HATCHET_RABBITMQ_CONF:-hatchet_rabbitmq_conf_test}
  hatchet_postgres_data_test: # For Hatchet's PostgreSQL instance
    name: ${VOLUME_HATCHET_POSTGRES_DATA:-hatchet_postgres_data_test}

services:
  postgres-test: # R2R's own pgvector DB, if --profile postgres is active
    image: pgvector/pgvector:pg16
    env_file: .env
    profiles: [postgres]
    environment:
      - POSTGRES_USER=${R2R_POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${R2R_POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${R2R_POSTGRES_DBNAME:-r2r_test}
      - POSTGRES_HOST=172.21.0.5 # Using its own IP for consistency if something inside tries to use POSTGRES_HOST
      - POSTGRES_PORT=${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7556}
      - POSTGRES_MAX_CONNECTIONS=100
      - PGPORT=${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7556}
      - PGSSLMODE=disable
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    volumes:
      - postgres_data_test:/var/lib/postgresql/data
    ports:
      - "${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7556}:${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7556}"
    healthcheck:
      test: ["CMD-SHELL", "PGSSLMODE=disable pg_isready -h localhost -U ${R2R_POSTGRES_USER:-postgres} -p ${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7556}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command:
      - "-c"
      - "max_connections=100"
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.5

  hatchet-postgres-test:
    image: postgres:17
    env_file: .env
    environment:
      POSTGRES_DB: ${HATCHET_POSTGRES_DBNAME:-hatchet_test}
      POSTGRES_USER: ${HATCHET_POSTGRES_USER:-hatchet_user}
      POSTGRES_PASSWORD: ${HATCHET_POSTGRES_PASSWORD:-hatchet_password}
      PGSSLMODE: disable
    shm_size: '1gb'
    command:
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=512MB"
      - "-c"
      - "effective_cache_size=1GB"
      - "-c"
      - "maintenance_work_mem=256MB"
      - "-c"
      - "work_mem=16MB"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    volumes:
      - hatchet_postgres_data_test:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "PGSSLMODE=disable pg_isready -h localhost -U ${HATCHET_POSTGRES_USER:-hatchet_user} -d ${HATCHET_POSTGRES_DBNAME:-hatchet_test} -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.6

  hatchet-rabbitmq-test:
    image: "rabbitmq:3-management"
    env_file: .env
    hostname: "hatchet-rabbitmq-test"
    ports:
      - "${R2R_RABBITMQ_PORT:-9674}:5672"
      - "${R2R_RABBITMQ_MGMT_PORT:-19674}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER:-user}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS:-password}"
      RABBITMQ_TCP_KEEPALIVE: "true"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    volumes:
      - hatchet_rabbitmq_data_test:/var/lib/rabbitmq
      - hatchet_rabbitmq_conf_test:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.7

  hatchet-create-db-test:
    image: postgres:17
    env_file: .env
    environment:
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-test:5432/${HATCHET_POSTGRES_DBNAME:-hatchet_test}?sslmode=disable"
      PGSSLMODE: disable
    command: >
      sh -c "
        set -e;
        echo 'Waiting for PostgreSQL to be ready...';
        TIMEOUT=60; SLEEP_TIME=2; ELAPSED=0;
        until pg_isready -h hatchet-postgres-test -p 5432 -U ${HATCHET_POSTGRES_USER:-hatchet_user} || [ $$ELAPSED -ge $$TIMEOUT ]; do
          echo \"Waiting for PostgreSQL (hatchet-postgres-test:5432) ($$ELAPSED/$$TIMEOUT seconds)...\";
          sleep $$SLEEP_TIME;
          ELAPSED=$$((ELAPSED+SLEEP_TIME));
        done;
        if [ $$ELAPSED -ge $$TIMEOUT ]; then echo \"Timed out waiting for PostgreSQL\"; exit 1; fi;
        echo 'PostgreSQL is ready, checking if database exists...';
        if ! PGPASSWORD=${HATCHET_POSTGRES_PASSWORD:-hatchet_password} psql -h hatchet-postgres-test -p 5432 -U ${HATCHET_POSTGRES_USER:-hatchet_user} -lqt | grep -qw ${HATCHET_POSTGRES_DBNAME:-hatchet_test}; then
          echo 'Database ${HATCHET_POSTGRES_DBNAME:-hatchet_test} does not exist, creating it...';
          PGPASSWORD=${HATCHET_POSTGRES_PASSWORD:-hatchet_password} createdb -h hatchet-postgres-test -p 5432 -U ${HATCHET_POSTGRES_USER:-hatchet_user} -w ${HATCHET_POSTGRES_DBNAME:-hatchet_test};
        else
          echo 'Database ${HATCHET_POSTGRES_DBNAME:-hatchet_test} already exists, skipping creation.';
        fi
      "
    depends_on:
      hatchet-postgres-test:
        condition: service_healthy
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.15

  hatchet-migration-test:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:latest
    env_file: .env
    environment:
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-test:5432/${HATCHET_POSTGRES_DBNAME:-hatchet_test}?sslmode=disable"
      PGSSLMODE: disable
    depends_on:
      hatchet-create-db-test:
        condition: service_completed_successfully
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.16

  hatchet-setup-config-test:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest
    env_file: .env
    environment:
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-test:5432/${HATCHET_POSTGRES_DBNAME:-hatchet_test}?sslmode=disable&pool_max_conns=20&pool_min_conns=10"
      PGSSLMODE: disable
      HATCHET_CLIENT_GRPC_MAX_RECV_MESSAGE_LENGTH: "${HATCHET_CLIENT_GRPC_MAX_RECV_MESSAGE_LENGTH:-134217728}"
      HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH: "${HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH:-134217728}"
      DATABASE_POSTGRES_PORT: "5432"
      DATABASE_POSTGRES_HOST: hatchet-postgres-test
      DATABASE_POSTGRES_USERNAME: "${HATCHET_POSTGRES_USER:-hatchet_user}"
      DATABASE_POSTGRES_PASSWORD: "${HATCHET_POSTGRES_PASSWORD:-hatchet_password}"
      HATCHET_DATABASE_POSTGRES_DB_NAME: "${HATCHET_POSTGRES_DBNAME:-hatchet_test}"
      SERVER_TASKQUEUE_RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-user}:${RABBITMQ_DEFAULT_PASS:-password}@hatchet-rabbitmq-test:5672/
      SERVER_AUTH_COOKIE_DOMAIN: "http://host.docker.internal:${R2R_HATCHET_DASHBOARD_PORT:-9275}"
      SERVER_URL: "http://host.docker.internal:${R2R_HATCHET_DASHBOARD_PORT:-9275}"
      SERVER_AUTH_COOKIE_INSECURE: "t"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_BROADCAST_ADDRESS: "hatchet-engine-test:${R2R_HATCHET_ENGINE_PORT:-9078}"
      SERVER_GRPC_MAX_MSG_SIZE: "${HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH:-134217728}"
      SERVER_GRPC_PORT: "${R2R_HATCHET_ENGINE_PORT:-9078}"
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    volumes:
      - hatchet_certs_test:/hatchet/certs
      - hatchet_config_test:/hatchet/config
    depends_on:
      hatchet-migration-test:
        condition: service_completed_successfully
      hatchet-rabbitmq-test:
        condition: service_healthy
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.17

  hatchet-engine-test:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:latest
    env_file: .env
    environment:
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-test:5432/${HATCHET_POSTGRES_DBNAME:-hatchet_test}?sslmode=disable&pool_max_conns=20&pool_min_conns=10"
      PGSSLMODE: disable
      SERVER_GRPC_BROADCAST_ADDRESS: "hatchet-engine-test:${R2R_HATCHET_ENGINE_PORT:-9078}"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_PORT: "${R2R_HATCHET_ENGINE_PORT:-9078}"
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_MAX_MSG_SIZE: "${HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH:-134217728}"
    command: /hatchet/hatchet-engine --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config-test:
        condition: service_completed_successfully
      hatchet-postgres-test:
        condition: service_healthy
      hatchet-rabbitmq-test:
        condition: service_healthy
    ports:
      - "${R2R_HATCHET_ENGINE_PORT:-9078}:${R2R_HATCHET_ENGINE_PORT:-9078}"
    volumes:
      - hatchet_certs_test:/hatchet/certs
      - hatchet_config_test:/hatchet/config
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:${R2R_HATCHET_HEALTHCHECK_PORT:-8734}/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.18

  hatchet-dashboard-test:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-dashboard:latest
    env_file: .env
    environment:
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-test:5432/${HATCHET_POSTGRES_DBNAME:-hatchet_test}?sslmode=disable&pool_max_conns=10&pool_min_conns=5"
      PGSSLMODE: disable
    command: sh ./entrypoint.sh --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config-test:
        condition: service_completed_successfully
    volumes:
      - hatchet_certs_test:/hatchet/certs
      - hatchet_config_test:/hatchet/config
    ports:
      - "${R2R_HATCHET_DASHBOARD_PORT:-9275}:80"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.19

  setup-token-test:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest
    env_file: .env
    environment:
        PGSSLMODE: disable
    command: >
      sh -c "
        set -e;
        echo 'Starting token creation process...';
        TOKEN_OUTPUT=$$(PGSSLMODE=disable /hatchet/hatchet-admin token create --config /hatchet/config --tenant-id ${HATCHET_TENANT_ID:-707d0855-80ab-4e1f-a156-f1c4546cbf52} 2>&1);
        TOKEN=$$(echo \"$$TOKEN_OUTPUT\" | grep -Eo 'eyJ[A-Za-z0-9_-]*\.eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*');
        if [ -z \"$$TOKEN\" ]; then echo 'Error: Failed to extract token.' >&2; echo \"$$TOKEN_OUTPUT\" >&2; exit 1; fi;
        echo \"$$TOKEN\" > /tmp/hatchet_api_key;
        echo -n \"$$TOKEN\" > /hatchet_api_key/api_key.txt;
        if [ \"$$(cat /tmp/hatchet_api_key)\" != \"$$(cat /hatchet_api_key/api_key.txt)\" ]; then echo 'Error: Token copy failed' >&2; exit 1; fi;
        echo 'Hatchet API key has been saved successfully'
      "
    volumes:
      - hatchet_certs_test:/hatchet/certs
      - hatchet_config_test:/hatchet/config
      - hatchet_api_key_test:/hatchet_api_key
    depends_on:
      hatchet-engine-test:
        condition: service_healthy
      hatchet-setup-config-test:
        condition: service_completed_successfully
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.20

  r2r-test:
    build:
      context: .
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - R2R_PORT=${R2R_PORT_TEST:-8272}
      - R2R_HOST=${R2R_HOST:-0.0.0.0}
      - PYTHONHASHSEED=random
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONASYNCIODEBUG=0
      - R2R_CONFIG_NAME=${R2R_CONFIG_NAME:-}
      - R2R_CONFIG_PATH=${R2R_CONFIG_PATH:-/app/r2r.toml}
      - R2R_PROJECT_NAME=${R2R_PROJECT_NAME:-r2r_test}
      # R2R_POSTGRES_* vars are from production .env - using production database
      - R2R_POSTGRES_USER=${R2R_POSTGRES_USER}
      - R2R_POSTGRES_PASSWORD=${R2R_POSTGRES_PASSWORD}
      - R2R_POSTGRES_HOST=${R2R_POSTGRES_HOST}  # Production GCP database
      - R2R_POSTGRES_PORT=${R2R_POSTGRES_PORT}
      - R2R_POSTGRES_DBNAME=${R2R_POSTGRES_DBNAME}
      - PGSSLMODE=${PGSSLMODE}
      # Other API keys from production (safe to use for testing)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      # Hatchet client connection (local, TLS strategy none)
      - HATCHET_CLIENT_TLS_STRATEGY=none
    command: >
      sh -c '
        if [ -z "$${HATCHET_CLIENT_TOKEN}" ]; then
          export HATCHET_CLIENT_TOKEN=$$(cat /hatchet_api_key/api_key.txt);
        fi;
        # /etc/hosts manipulation for IP-based resolution
        echo "172.21.0.5 postgres-test" >> /etc/hosts;
        echo "172.21.0.6 hatchet-postgres-test" >> /etc/hosts;
        echo "172.21.0.7 hatchet-rabbitmq-test" >> /etc/hosts;
        exec uvicorn core.main.app_entry:app --host $${R2R_HOST} --port $${R2R_PORT_TEST:-8272} --workers 1
      '
    networks:
      r2r-network-test:
        ipv4_address: 172.21.0.10
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${R2R_PORT_TEST:-8272}/v3/health"]
      interval: 6s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    volumes:
      - ./r2r.test.toml:${R2R_CONFIG_PATH:-/app/r2r.toml}
      - hatchet_api_key_test:/hatchet_api_key:ro
    ports:
      - "${R2R_PORT_TEST:-8272}:${R2R_PORT_TEST:-8272}"
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      setup-token-test:
        condition: service_completed_successfully
      hatchet-engine-test:
        condition: service_healthy
      hatchet-postgres-test:
        condition: service_healthy