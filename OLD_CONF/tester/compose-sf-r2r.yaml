networks:
  r2r-network-prod:
    driver: bridge
    attachable: true
    labels:
      - "com.docker.compose.recreate=always"
    driver_opts:
      com.docker.network.driver.mtu: 9000
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16

volumes:
  hatchet_certs_prod:
    name: ${VOLUME_HATCHET_CERTS:-hatchet_certs_prod}
  hatchet_config_prod:
    name: ${VOLUME_HATCHET_CONFIG:-hatchet_config_prod}
  hatchet_api_key_prod:
    name: ${VOLUME_HATCHET_API_KEY:-hatchet_api_key_prod}
  postgres_data_prod: # For the R2R pgvector instance, if run with --profile postgres
    name: ${VOLUME_POSTGRES_DATA:-postgres_data_prod}
  hatchet_rabbitmq_data_prod:
    name: ${VOLUME_HATCHET_RABBITMQ_DATA:-hatchet_rabbitmq_data_prod}
  hatchet_rabbitmq_conf_prod:
    name: ${VOLUME_HATCHET_RABBITMQ_CONF:-hatchet_rabbitmq_conf_prod}
  hatchet_postgres_data_prod: # For Hatchet's PostgreSQL instance
    name: ${VOLUME_HATCHET_POSTGRES_DATA:-hatchet_postgres_data_prod}

services:
  postgres-prod: # R2R's own pgvector DB, if --profile postgres is active
    image: pgvector/pgvector:pg16
    env_file: .env
    profiles: [postgres]
    environment:
      - POSTGRES_USER=${R2R_POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${R2R_POSTGRES_PASSWORD:-postgres}
      - POSTGRES_HOST=172.20.0.5 # Using its own IP for consistency if something inside tries to use POSTGRES_HOST
      - POSTGRES_PORT=${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7555}
      - POSTGRES_MAX_CONNECTIONS=100
      - PGPORT=${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7555}
      - PGSSLMODE=disable
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7555}:${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7555}"
    healthcheck:
      test: ["CMD-SHELL", "PGSSLMODE=disable pg_isready -h localhost -U ${R2R_POSTGRES_USER:-postgres} -p ${R2R_POSTGRES_PORT_LOCAL_PROFILE:-7555}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    command:
      - "-c"
      - "max_connections=100"
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  hatchet-postgres-prod:
    image: postgres:17
    env_file: .env
    environment:
      POSTGRES_DB: ${HATCHET_POSTGRES_DBNAME:-hatchet}
      POSTGRES_USER: ${HATCHET_POSTGRES_USER:-hatchet_user}
      POSTGRES_PASSWORD: ${HATCHET_POSTGRES_PASSWORD:-hatchet_password}
      PGSSLMODE: disable
    shm_size: '3gb'
    command:
      - "-c"
      - "max_connections=200"
      - "-c"
      - "shared_buffers=2GB"
      - "-c"
      - "effective_cache_size=4GB"
      - "-c"
      - "maintenance_work_mem=1GB"
      - "-c"
      - "work_mem=32MB"
      - "-c"
      - "wal_buffers=16MB"
      - "-c"
      - "random_page_cost=1.1"
      - "-c"
      - "default_statistics_target=100"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    volumes:
      - hatchet_postgres_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "PGSSLMODE=disable pg_isready -h localhost -U ${HATCHET_POSTGRES_USER:-hatchet_user} -d ${HATCHET_POSTGRES_DBNAME:-hatchet} -p 5432"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.6
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G

  hatchet-rabbitmq-prod:
    image: "rabbitmq:3-management"
    env_file: .env
    hostname: "hatchet-rabbitmq-prod"
    ports:
      - "${R2R_RABBITMQ_PORT:-9673}:5672"
      - "${R2R_RABBITMQ_MGMT_PORT:-19673}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "${RABBITMQ_DEFAULT_USER:-user}"
      RABBITMQ_DEFAULT_PASS: "${RABBITMQ_DEFAULT_PASS:-password}"
      RABBITMQ_TCP_KEEPALIVE: "true"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    volumes:
      - hatchet_rabbitmq_data_prod:/var/lib/rabbitmq
      - hatchet_rabbitmq_conf_prod:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.7
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  hatchet-create-db-prod:
    image: postgres:17
    env_file: .env
    environment:
      # DATABASE_URL uses hostname, but pg_isready/psql/createdb in command use IP via hostname resolution.
      # For direct tools in command, PGSSLMODE=disable is set.
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-prod:5432/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
      PGSSLMODE: disable
    command: >
      sh -c "
        set -e;
        echo 'Waiting for PostgreSQL to be ready...';
        TIMEOUT=60; SLEEP_TIME=2; ELAPSED=0;
        # Using hostname hatchet-postgres-prod, which will be resolved via /etc/hosts or Docker DNS to 172.20.0.6
        until pg_isready -h hatchet-postgres-prod -p 5432 -U ${HATCHET_POSTGRES_USER:-hatchet_user} || [ $$ELAPSED -ge $$TIMEOUT ]; do
          echo \"Waiting for PostgreSQL (hatchet-postgres-prod:5432) ($$ELAPSED/$$TIMEOUT seconds)...\";
          sleep $$SLEEP_TIME;
          ELAPSED=$$((ELAPSED+SLEEP_TIME));
        done;
        if [ $$ELAPSED -ge $$TIMEOUT ]; then echo \"Timed out waiting for PostgreSQL\"; exit 1; fi;
        echo 'PostgreSQL is ready, checking if database exists...';
        if ! PGPASSWORD=${HATCHET_POSTGRES_PASSWORD:-hatchet_password} psql -h hatchet-postgres-prod -p 5432 -U ${HATCHET_POSTGRES_USER:-hatchet_user} -lqt | grep -qw ${HATCHET_POSTGRES_DBNAME:-hatchet}; then
          echo 'Database ${HATCHET_POSTGRES_DBNAME:-hatchet} does not exist, creating it...';
          PGPASSWORD=${HATCHET_POSTGRES_PASSWORD:-hatchet_password} createdb -h hatchet-postgres-prod -p 5432 -U ${HATCHET_POSTGRES_USER:-hatchet_user} -w ${HATCHET_POSTGRES_DBNAME:-hatchet};
        else
          echo 'Database ${HATCHET_POSTGRES_DBNAME:-hatchet} already exists, skipping creation.';
        fi
      "
    depends_on:
      hatchet-postgres-prod:
        condition: service_healthy
    dns: # External DNS
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.15
    # No extra_hosts needed here as it relies on Docker DNS or /etc/hosts from other services if they modify it.

  hatchet-migration-prod:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-migrate:latest
    env_file: .env
    environment:
      # DATABASE_URL uses hostname, which will be resolved.
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-prod:5432/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable"
      PGSSLMODE: disable
    depends_on:
      hatchet-create-db-prod:
        condition: service_completed_successfully
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.16

  hatchet-setup-config-prod:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest
    env_file: .env
    environment:
      # DATABASE_URL uses hostname.
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-prod:5432/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable&pool_max_conns=20&pool_min_conns=10"
      PGSSLMODE: disable
      HATCHET_CLIENT_GRPC_MAX_RECV_MESSAGE_LENGTH: "${HATCHET_CLIENT_GRPC_MAX_RECV_MESSAGE_LENGTH:-134217728}"
      HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH: "${HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH:-134217728}"
      DATABASE_POSTGRES_PORT: "5432"
      DATABASE_POSTGRES_HOST: hatchet-postgres-prod # For generated config
      DATABASE_POSTGRES_USERNAME: "${HATCHET_POSTGRES_USER:-hatchet_user}"
      DATABASE_POSTGRES_PASSWORD: "${HATCHET_POSTGRES_PASSWORD:-hatchet_password}"
      HATCHET_DATABASE_POSTGRES_DB_NAME: "${HATCHET_POSTGRES_DBNAME:-hatchet}"
      SERVER_TASKQUEUE_RABBITMQ_URL: amqp://${RABBITMQ_DEFAULT_USER:-user}:${RABBITMQ_DEFAULT_PASS:-password}@hatchet-rabbitmq-prod:5672/ # For generated config
      SERVER_AUTH_COOKIE_DOMAIN: "http://host.docker.internal:${R2R_HATCHET_DASHBOARD_PORT:-9274}"
      SERVER_URL: "http://host.docker.internal:${R2R_HATCHET_DASHBOARD_PORT:-9274}"
      SERVER_AUTH_COOKIE_INSECURE: "t"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_BROADCAST_ADDRESS: "hatchet-engine-prod:${R2R_HATCHET_ENGINE_PORT:-9077}" # For generated config
      SERVER_GRPC_MAX_MSG_SIZE: "${HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH:-134217728}"
      SERVER_GRPC_PORT: "${R2R_HATCHET_ENGINE_PORT:-9077}"
    command: /hatchet/hatchet-admin quickstart --skip certs --generated-config-dir /hatchet/config --overwrite=false
    volumes:
      - hatchet_certs_prod:/hatchet/certs
      - hatchet_config_prod:/hatchet/config
    depends_on:
      hatchet-migration-prod:
        condition: service_completed_successfully
      hatchet-rabbitmq-prod:
        condition: service_healthy
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.17

  hatchet-engine-prod:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-engine:latest
    env_file: .env
    environment:
      # DATABASE_URL uses hostname.
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-prod:5432/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable&pool_max_conns=20&pool_min_conns=10"
      PGSSLMODE: disable
      SERVER_GRPC_BROADCAST_ADDRESS: "hatchet-engine-prod:${R2R_HATCHET_ENGINE_PORT:-9077}"
      SERVER_GRPC_BIND_ADDRESS: "0.0.0.0"
      SERVER_GRPC_PORT: "${R2R_HATCHET_ENGINE_PORT:-9077}"
      SERVER_GRPC_INSECURE: "t"
      SERVER_GRPC_MAX_MSG_SIZE: "${HATCHET_CLIENT_GRPC_MAX_SEND_MESSAGE_LENGTH:-134217728}"
    command: /hatchet/hatchet-engine --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config-prod:
        condition: service_completed_successfully
      hatchet-postgres-prod:
        condition: service_healthy
      hatchet-rabbitmq-prod:
        condition: service_healthy
    ports:
      - "${R2R_HATCHET_ENGINE_PORT:-9077}:${R2R_HATCHET_ENGINE_PORT:-9077}"
    volumes:
      - hatchet_certs_prod:/hatchet/certs
      - hatchet_config_prod:/hatchet/config
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:${R2R_HATCHET_HEALTHCHECK_PORT:-8733}/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.18
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 8G
        reservations:
          cpus: '3'
          memory: 6G

  hatchet-dashboard-prod:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-dashboard:latest
    env_file: .env
    environment:
      # DATABASE_URL uses hostname.
      DATABASE_URL: "postgres://${HATCHET_POSTGRES_USER:-hatchet_user}:${HATCHET_POSTGRES_PASSWORD:-hatchet_password}@hatchet-postgres-prod:5432/${HATCHET_POSTGRES_DBNAME:-hatchet}?sslmode=disable&pool_max_conns=10&pool_min_conns=5"
      PGSSLMODE: disable
    command: sh ./entrypoint.sh --config /hatchet/config
    restart: on-failure
    depends_on:
      hatchet-setup-config-prod:
        condition: service_completed_successfully
    volumes:
      - hatchet_certs_prod:/hatchet/certs
      - hatchet_config_prod:/hatchet/config
    ports:
      - "${R2R_HATCHET_DASHBOARD_PORT:-9274}:80"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.19
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  setup-token-prod:
    image: ghcr.io/hatchet-dev/hatchet/hatchet-admin:latest
    env_file: .env
    environment:
        PGSSLMODE: disable
    command: >
      sh -c "
        set -e;
        echo 'Starting token creation process...';
        TOKEN_OUTPUT=$$(PGSSLMODE=disable /hatchet/hatchet-admin token create --config /hatchet/config --tenant-id ${HATCHET_TENANT_ID:-707d0855-80ab-4e1f-a156-f1c4546cbf52} 2>&1);
        TOKEN=$$(echo \"$$TOKEN_OUTPUT\" | grep -Eo 'eyJ[A-Za-z0-9_-]*\.eyJ[A-Za-z0-9_-]*\.[A-Za-z0-9_-]*');
        if [ -z \"$$TOKEN\" ]; then echo 'Error: Failed to extract token.' >&2; echo \"$$TOKEN_OUTPUT\" >&2; exit 1; fi;
        echo \"$$TOKEN\" > /tmp/hatchet_api_key;
        echo -n \"$$TOKEN\" > /hatchet_api_key/api_key.txt;
        if [ \"$$(cat /tmp/hatchet_api_key)\" != \"$$(cat /hatchet_api_key/api_key.txt)\" ]; then echo 'Error: Token copy failed' >&2; exit 1; fi;
        echo 'Hatchet API key has been saved successfully'
      "
    volumes:
      - hatchet_certs_prod:/hatchet/certs
      - hatchet_config_prod:/hatchet/config
      - hatchet_api_key_prod:/hatchet_api_key
    depends_on:
      hatchet-engine-prod:
        condition: service_healthy
      hatchet-setup-config-prod:
        condition: service_completed_successfully
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.20

  unstructured-prod:
    image: ${UNSTRUCTURED_IMAGE:-ragtoriches/unst-prod} # Use specific prod tag/digest
    env_file: .env
    ports:
      - "${UNSTRUCTURED_PORT:-9275}:7275"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.8
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7275/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '6'
          memory: 20G
        reservations:
          cpus: '3'
          memory: 8G

  graph_clustering-prod:
    image: ${GRAPH_CLUSTERING_IMAGE:-ragtoriches/cluster-prod} # Use specific prod tag/digest
    env_file: .env
    ports:
      - "${R2R_GRAPH_CLUSTERING_PORT:-9276}:7276"
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.9
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7276/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '3'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 1G

  r2r-prod:
    image: ${R2R_IMAGE} # Use a specific R2R_IMAGE_PROD variable from .env
    env_file: .env # PGSSLMODE=require from .env will apply to R2R_POSTGRES_HOST
    environment:
      # PGSSLMODE from .env will apply here for R2R_POSTGRES_HOST connection
      - PYTHONUNBUFFERED=1
      - R2R_PORT=${R2R_PORT_PROD:-9272}
      - R2R_HOST=${R2R_HOST:-0.0.0.0}
      - PYTHONHASHSEED=random
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONASYNCIODEBUG=0
      - R2R_CONFIG_NAME=${R2R_CONFIG_NAME:-}
      - R2R_CONFIG_PATH=${R2R_CONFIG_PATH:-/app/r2r.toml}
      - R2R_PROJECT_NAME=${R2R_PROJECT_NAME:-r2r_default_prod}
      # R2R_POSTGRES_* vars are for the main DB (e.g. GCP), uses PGSSLMODE from .env
      - R2R_POSTGRES_USER=${R2R_POSTGRES_USER}
      - R2R_POSTGRES_PASSWORD=${R2R_POSTGRES_PASSWORD}
      - R2R_POSTGRES_HOST=${R2R_POSTGRES_HOST} # This is your GCP IP from .env
      - R2R_POSTGRES_PORT=${R2R_POSTGRES_PORT}
      - R2R_POSTGRES_DBNAME=${R2R_POSTGRES_DBNAME}
      # Other API keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE}
      # ... (and so on for all external service keys/configs)
      # Unstructured connection (local - using its IP)
      - UNSTRUCTURED_SERVICE_URL=http://172.20.0.8:7275
      # Hatchet client connection (local, TLS strategy none)
      - HATCHET_CLIENT_TLS_STRATEGY=none
      # Graph Clustering connection (local - using its IP)
      - CLUSTERING_SERVICE_URL=http://172.20.0.9:7276
    command: >
      sh -c '
        if [ -z "$${HATCHET_CLIENT_TOKEN}" ]; then
          export HATCHET_CLIENT_TOKEN=$$(cat /hatchet_api_key/api_key.txt);
        fi;
        # /etc/hosts manipulation for IP-based resolution (as requested)
        # Ensure these IPs match the static IPs defined for each service.
        echo "172.20.0.5 postgres-prod" >> /etc/hosts;
        echo "172.20.0.6 hatchet-postgres-prod" >> /etc/hosts;
        echo "172.20.0.7 hatchet-rabbitmq-prod" >> /etc/hosts;
        echo "172.20.0.8 unstructured-prod" >> /etc/hosts;
        echo "172.20.0.9 graph_clustering-prod" >> /etc/hosts;
        exec uvicorn core.main.app_entry:app --host $${R2R_HOST} --port $${R2R_PORT_PROD:-9272} --workers ${UVICORN_WORKERS_PROD:-4}
      '
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${R2R_PORT_PROD:-9272}/v3/health"]
      interval: 6s
      timeout: 5s
      retries: 5
    restart: unless-stopped # Changed for prod
    volumes:
      - ./r2r.toml:${R2R_CONFIG_PATH:-/app/r2r.toml}
      - hatchet_api_key_prod:/hatchet_api_key:ro
    extra_hosts:
      - host.docker.internal:host-gateway
    depends_on:
      setup-token-prod:
        condition: service_completed_successfully
      unstructured-prod:
        condition: service_healthy
      hatchet-engine-prod:
        condition: service_healthy
      hatchet-postgres-prod:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 12G
        reservations:
          cpus: '4'
          memory: 8G

  r2r-dashboard-prod:
    image: emrgntcmplxty/r2r-dashboard:latest # Use specific prod tag/digest
    env_file: .env
    environment:
      - NEXT_PUBLIC_R2R_DEPLOYMENT_URL=${NEXT_PUBLIC_R2R_DEPLOYMENT_URL_PROD:-http://localhost:9280/api}
      - NEXT_PUBLIC_HATCHET_DASHBOARD_URL=${NEXT_PUBLIC_HATCHET_DASHBOARD_URL_PROD:-http://localhost:9280/hatchet-dashboard/}
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.12
    ports:
      - "${R2R_DASHBOARD_PORT_PROD:-9273}:3000"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.2'
          memory: 256M

  nginx-prod:
    image: nginx:latest # Use specific prod tag/digest
    env_file: .env
    ports:
      - "${R2R_NGINX_PORT_PROD:-9280}:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      r2r-prod:
        condition: service_healthy
      graph_clustering-prod:
        condition: service_healthy
      r2r-dashboard-prod:
        condition: service_started
      hatchet-dashboard-prod:
        condition: service_started
    command: >
      sh -c '
        # /etc/hosts manipulation for IP-based resolution (as requested for Nginx upstreams)
        # Ensure these IPs match the static IPs defined for each service.
        echo "172.20.0.10 r2r-prod" >> /etc/hosts;
        echo "172.20.0.9 graph_clustering-prod" >> /etc/hosts;
        echo "172.20.0.12 r2r-dashboard-prod" >> /etc/hosts; # If nginx proxies this by name
        echo "172.20.0.19 hatchet-dashboard-prod" >> /etc/hosts; # If nginx proxies this by name
        nginx -g "daemon off;"
      '
    dns:
      - 8.8.8.8
      - 8.8.4.4
    dns_opt:
      - ndots:1
      - timeout:2
      - attempts:3
    networks:
      r2r-network-prod:
        ipv4_address: 172.20.0.11
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
